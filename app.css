* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	font: inherit;
	max-inline-size: 100%;
	touch-action: none;
}

html {
	block-size: 100%;
	font-family: Avenir, Montserrat, Corbel, "URW Gothic", source-sans-pro,
		sans-serif;
	font-weight: 700;
	color-scheme: light;
	font-size: 125%;

	--gray: oklch(90% 0 0);
	--purple: oklch(90% 0.15 300);
	--blue: oklch(90% 0.15 210);
	--green: oklch(90% 0.15 150);
	--yellow: oklch(90% 0.15 90);
	--orange: oklch(90% 0.15 60);
	--red: oklch(90% 0.15 30);
}

body {
	min-block-size: 100%;
	display: grid;
	grid-template-columns: 1fr;
	grid-template-rows: auto 3rem;
	padding: 1.5vmin;
	background-color: color-mix(in lch, var(--purple), oklch(100% 0 0) 75%);
	block-size: 100%;
	inline-size: 100%;
	container-type: size;
	place-content: safe center;
}

memory-game {
	max-inline-size: 100cqi;
	padding-block: var(--gap);
	display: grid;
	place-content: safe center;
	max-block-size: 100cqb;
	gap: var(--gap);
	grid-template-columns: repeat(var(--columns), 1fr);

	--gap: 1.5cqmin;
	--columns: 1;

	@container (aspect-ratio <= 10/42) {
		inline-size: 100cqi;
		aspect-ratio: 10/42;

		--columns: 2;
	}

	@container (aspect-ratio > 10/42) and (aspect-ratio <= 15/28) {
		inline-size: 100cqi;
		aspect-ratio: 15/28;

		--columns: 3;
	}

	@container (aspect-ratio > 15/28) and (aspect-ratio <= 20/21) {
		block-size: 100cqb;
		aspect-ratio: 20/21;

		--columns: 4;
	}

	@container (aspect-ratio > 20/21) {
		block-size: 100cqb;
		aspect-ratio: 30/14;

		--columns: 6;
	}

	:where(button) {
		appearance: none;
		border: none;
		border-radius: 0.5rem;
		display: block;
		position: relative;
		inline-size: auto;
		aspect-ratio: 5 / 7;
		background: color-mix(in lch, var(--purple), oklch(100% 0 0) 50%);

		&:where(:empty) {
			border-radius: 0.5rem;
			box-shadow: 0 0 0.5cqmin 0
				color-mix(in lch, var(--purple), oklch(0% 0 0) 75%);
			background: var(--purple);
			font-size: calc(45cqi / var(--columns));
			block-size: 100%;
			inline-size: 100%;
			display: block;
			place-content: center;

			&::before {
				content: "ðŸ¦‰";
			}
		}
	}

	:where(dialog[open]) {
		border: none;
		display: flex;
		flex-wrap: wrap;
		gap: var(--gap);
		place-content: center;
		align-items: flex-start;
		padding: 0.5rem;
		border-radius: 0.5rem;
		position: absolute;
		margin: auto;
		scale: 0;
		animation-name: dialog;
		animation-duration: 0.5s;
		animation-delay: 1.8s;
		animation-fill-mode: forwards;
		background: none;
		overflow: visible;

		&::backdrop {
			opacity: 0;
			animation-name: backdrop;
			animation-duration: 0.5s;
			animation-delay: 1.8s;
			animation-fill-mode: forwards;
			background-color: color-mix(
				in lch,
				var(--purple),
				oklch(0% 0 0 / 0.5) 75%
			);
		}

		:where(figure) {
			background: var(--purple);
			box-shadow: 0 0 0.5cqmin 0
				color-mix(in lch, var(--purple), oklch(0% 0 0) 75%);
			font-size: calc(45cqi / var(--columns));
			aspect-ratio: 5 / 7;
			border-radius: 0.5rem;
			display: grid;
			place-content: center;
			min-inline-size: calc(100cqi / var(--columns));
			flex-shrink: 0;
			flex-grow: 0;

			@container (aspect-ratio <= 15/28) {
				font-size: 45cqi;
				min-inline-size: 100cqi;
			}
		}

		:where(div) {
			background: white;
			border-radius: 0.5rem;
			box-shadow: 0 0 0.5cqmin 0 color-mix(in lch, white, oklch(0% 0 0) 75%);
			display: grid;
			grid-template-rows: auto max-content;
			grid-template-columns: 1fr 1fr;
			padding: 0.5rem;
			gap: 0.5rem;
			min-inline-size: min-content;
			max-inline-size: calc(100cqi / var(--columns));
			font-size: max(0.8rem, calc(10cqi / var(--columns)));
			position: relative;

			&::before {
				content: "";
				display: block;
				width: 0;
				height: 0;
				border-top: var(--gap) solid transparent;
				border-bottom: var(--gap) solid transparent;
				border-right: var(--gap) solid white;
				position: absolute;
				left: calc((-1 * var(--gap)) + 1px);
				top: 2rem;
			}

			:where(p) {
				grid-column: 1 / -1;
			}

			@container (aspect-ratio <= 15/28) {
				min-inline-size: 100cqi;

				&::before {
					display: none;
				}
			}
		}

		:where(button) {
			font-size: inherit;
			font-weight: 900;
			display: inline-flex;
			place-content: center;
			gap: 0.5rem;
			appearance: none;
			border: none;
			padding: 0.5rem;
			border-radius: 0.5rem;
			border: 0.125rem solid currentColor;
			background: white;
			color: color-mix(in lch, var(--purple), oklch(0% 0 0) 50%);
			aspect-ratio: unset;
		}

		:where(svg) {
			block-size: 1.5rem;
			fill: currentColor;
		}
	}

	:where(.faces) {
		position: absolute;
		inset-inline-start: 0;
		inset-block-start: 0;
		border-radius: 0.5rem;
		font-size: calc(45cqi / var(--columns));
		block-size: 100%;
		inline-size: 100%;
		transform-style: preserve-3d;
		animation-timing-function: linear;
		animation-fill-mode: forwards;

		:where(.covered) & {
			transform: rotateY(180deg) scale(1);
			animation-name: covered;
			animation-duration: 0.2s;
		}

		:where(.flipped) & {
			animation-name: flipped;
			animation-duration: 0.2s;
		}

		:where(.matched) & {
			transform: rotateY(180deg) scale(1);
			animation-name: matched;
			animation-duration: 0.6s;
		}

		:where(.completed) & {
			transform: rotateY(540deg) scale(1);
			animation-name: completed;
			animation-duration: 1.8s;
		}
	}

	:where(.front, .back) {
		display: grid;
		place-content: center;
		position: absolute;
		inset-inline-start: 0;
		inset-block-start: 0;
		block-size: 100%;
		inline-size: 100%;
		border-radius: 0.5rem;
		user-select: none;
		-webkit-user-select: none;
	}

	:where(.front) {
		backface-visibility: hidden;
		background: var(--purple);
		box-shadow: 0 0 0.5cqmin 0
			color-mix(in lch, var(--purple), oklch(0% 0 0) 75%);
	}

	:where(.back) {
		backface-visibility: hidden;
		transform: rotateY(180deg);
		background: var(--back-background);
		box-shadow: 0 0 0.5cqmin 0
			color-mix(in lch, var(--back-background), oklch(0% 0 0) 75%);
	}
}

@keyframes backdrop {
	0% {
		opacity: 0;
	}

	100% {
		opacity: 1;
	}
}

@keyframes dialog {
	0% {
		scale: 0;
	}

	100% {
		scale: 1;
	}
}

@keyframes covered {
	0% {
		transform: rotateY(180deg) scale(1);
	}

	50% {
		transform: rotateY(90deg) scale(1.03125);
	}

	100% {
		transform: rotateY(0deg) scale(1);
	}
}

@keyframes flipped {
	0% {
		transform: rotateY(0deg) scale(1);
	}

	50% {
		transform: rotateY(90deg) scale(1.03125);
	}

	100% {
		transform: rotateY(180deg) scale(1);
	}
}

@keyframes matched {
	0% {
		transform: rotateY(180deg) scale(1);
	}

	50% {
		transform: rotateY(360deg) scale(1.03125);
	}

	100% {
		transform: rotateY(540deg) scale(1);
	}
}

@keyframes completed {
	0% {
		transform: rotateY(540deg) scale(1);
	}

	50% {
		transform: rotateY(1080deg) scale(1.03125);
	}

	100% {
		transform: rotateY(1620deg) scale(1);
	}
}
